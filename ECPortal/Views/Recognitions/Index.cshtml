@model Pk.Com.Jazz.ECP.ViewModels.RecognitionsViewModel
@using Newtonsoft.Json;
@{
    ViewData["Title"] = "Employee Recognitions";

    var recognitionTypeData = Model.Recognitions != null
        ? JsonConvert.SerializeObject(Model.Recognitions.GroupBy(r => r.RecognitionType).Select(g => new { Type = g.Key, Count = g.Count() }).ToList(), new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })
        : "[]";

    var recognitionProgressData = Model.Recognitions != null
        ? JsonConvert.SerializeObject(Model.Recognitions.GroupBy(r => r.RecognitionDate).Select(g => new { Date = g.Key, Count = g.Count() }).ToList(), new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })
        : "[]";
}

<h1 class="text-center my-4">Employee Recognitions</h1>

<div class="container">
    <!-- Chart Container -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">Recognition Insights</h3>
        </div>
        <div class="card-body">
            @if (Model.Recognitions == null || Model.Recognitions.Count == 0)
            {
                <div class="text-center mt-2">No recognitions data available for charts.</div>
            }
            else
            {
                <div class="row">
                    <!-- Bar Chart: Recognition Types -->
                    <div class="col-md-6">
                        <canvas id="recognitionTypeChart" width="400" height="200"></canvas>
                    </div>
                    <!-- Line Chart: Recognition Progress Over Time -->
                    <div class="col-md-6">
                        <canvas id="recognitionProgressChart" width="400" height="200"></canvas>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Recognition Details Table -->
    <div class="card mt-4">
        <div class="card-header">
            <h3 class="mb-0">Recognition Details</h3>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="recognitionsTable" class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Id</th>
                            <th>Recognition Date</th>
                            <th>Recognition Type</th>
                            @if (Model.IsAgent)
                            {
                                <th>Provided By</th>
                            }
                            else
                            {
                                <th>Recognized Agent</th>
                            }
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Recognitions != null && Model.Recognitions.Count > 0)
                        {
                            foreach (var recognition in Model.Recognitions)
                            {
                                var formattedDate = recognition.RecognitionDate.ToString("yyyy-MM-dd");
                                <tr>
                                    <td>@recognition.Id</td>
                                    <td>@formattedDate</td>
                                    <td>@recognition.RecognitionType</td>
                                    @if (Model.IsAgent)
                                    {
                                        <td>@recognition.ProvidedBy</td>
                                    }
                                    else
                                    {
                                        <td>@recognition.RecognizedAgent</td>
                                    }
                                    <td>
                                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#recognitionModal" data-id="@recognition.Id" data-recognition="@recognition.Recognition" data-date="@recognition.RecognitionDate.ToShortDateString()" data-type="@recognition.RecognitionType" data-comments="@recognition.Comments">
                                            View Details
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center">No recognition data available.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Recognition Details Modal -->
<div class="modal fade" id="recognitionModal" tabindex="-1" aria-labelledby="recognitionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="recognitionModalLabel">Recognition Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>Recognition:</strong> <span id="modalRecognition"></span></p>
                <p><strong>Date:</strong> <span id="modalDate"></span></p>
                <p><strong>Type:</strong> <span id="modalType"></span></p>
                <p><strong>Comments:</strong> <span id="modalComments"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize DataTable
            $('#recognitionsTable').DataTable({
                paging: true,
                pageLength: 5,
                lengthChange: false,
                info: false
            });

            // Parse recognition status data
            var recognitionTypeData = JSON.parse('@Html.Raw(recognitionTypeData)');
            var recognitionProgressData = JSON.parse('@Html.Raw(recognitionProgressData)');

            // Bar Chart: Recognition Types
            var ctxType = document.getElementById('recognitionTypeChart').getContext('2d');
            new Chart(ctxType, {
                type: 'bar',
                data: {
                    labels: recognitionTypeData.map(item => item.Type),
                    datasets: [{
                        label: 'Recognition Types',
                        data: recognitionTypeData.map(item => item.Count),
                        backgroundColor: 'rgba(75, 192, 192, 0.5)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Recognition Type'
                            },
                            ticks: {
                                maxRotation: 90,
                                minRotation: 45
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Count'
                            },
                            min: 0,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            callbacks: {
                                title: function (context) {
                                    return context[0].label;
                                },
                                label: function (context) {
                                    return `Count: ${context.raw}`;
                                }
                            }
                        }
                    }
                }
            });

            // Line Chart: Recognition Progress Over Time
            var ctxProgress = document.getElementById('recognitionProgressChart').getContext('2d');
            new Chart(ctxProgress, {
                type: 'line',
                data: {
                    labels: recognitionProgressData.map(item => new Date(item.Date).toLocaleDateString()),
                    datasets: [{
                        label: 'Recognition Progress',
                        data: recognitionProgressData.map(item => item.Count),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            },
                            ticks: {
                                maxRotation: 90,
                                minRotation: 45
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Count'
                            },
                            min: 0,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            callbacks: {
                                title: function (context) {
                                    return context[0].label;
                                },
                                label: function (context) {
                                    return `Count: ${context.raw}`;
                                }
                            }
                        }
                    }
                }
            });

            // Modal Event Handler
            var recognitionModal = document.getElementById('recognitionModal');
            recognitionModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget; // Button that triggered the modal
                var id = button.getAttribute('data-id');
                var recognition = button.getAttribute('data-recognition');
                var date = button.getAttribute('data-date');
                var type = button.getAttribute('data-type');
                var comments = button.getAttribute('data-comments');

                var modalRecognition = recognitionModal.querySelector('#modalRecognition');
                var modalDate = recognitionModal.querySelector('#modalDate');
                var modalType = recognitionModal.querySelector('#modalType');
                var modalComments = recognitionModal.querySelector('#modalComments');

                modalRecognition.textContent = recognition;
                modalDate.textContent = date;
                modalType.textContent = type;
                modalComments.textContent = comments;
            });
        });
    </script>


}


