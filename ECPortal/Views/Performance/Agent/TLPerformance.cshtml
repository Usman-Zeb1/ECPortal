@model Pk.Com.Jazz.ECP.ViewModels.EmployeePerformanceViewModel
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Employee Performance";

    var performanceData = Model != null
        ? JsonConvert.SerializeObject(new[]
        {
            new { Name = "Prepaid Sales", Target = Model.PrepaidSalesTarget, TotalSales = Model.TotalPrepaidSales, Performance = Model.PrepaidSalesPerformance },
            new { Name = "Postpaid Sales", Target = Model.PostpaidSalesTarget, TotalSales = Model.TotalPostpaidSales, Performance = Model.PostpaidSalesPerformance },
            new { Name = "Device Sales", Target = Model.DeviceSalesTarget, TotalSales = Model.TotalDeviceSales, Performance = Model.DeviceSalesPerformance },
            new { Name = "M-Wallet Sales", Target = Model.MWalletSalesTarget, TotalSales = Model.TotalMWalletSales, Performance = Model.MWalletSalesPerformance },
            new { Name = "4G Sales", Target = Model.FourGSalesTarget, TotalSales = Model.TotalFourGSales, Performance = Model.FourGSalesPerformance },
            new { Name = "Rox New Sales", Target = Model.RoxNewSalesTarget, TotalSales = Model.TotalRoxNewSales, Performance = Model.RoxNewSalesPerformance },
            new { Name = "Rox Conversion Sales", Target = Model.RoxConversionSalesTarget, TotalSales = Model.TotalRoxConversionSales, Performance = Model.RoxConversionSalesPerformance }
                        }, new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })
        : "[]";

    var dailyPerformanceData = Model != null
        ? JsonConvert.SerializeObject(Model.DailyPerformances.Select(dp => new
        {
            Date = dp.Date.ToShortDateString(),
            TotalSales = dp.TotalSales,
            Performance = dp.Performance
        }), new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })
        : "[]";

    var monthYear = new { MonthName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Model?.Month ?? 1), Year = Model?.Year ?? DateTime.Now.Year };
}

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<div class="container mt-5">
    <h1 class="text-center mb-4">Performance</h1>
    <form method="get" asp-action="YourPerformance">
        <div class="row mb-4">
            <div class="col-md-3">
                <label for="month" class="form-label">Month</label>
                <select id="month" name="month" class="form-select">
                    @for (int i = 1; i <= 12; i++)
                    {
                        var monthName = new DateTime(2024, i, 1).ToString("MMMM");
                        <option value="@i" selected="@(i == Model?.Month)">@monthName</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="year" class="form-label">Year</label>
                <select id="year" name="year" class="form-select">
                    @for (int i = DateTime.Now.Year; i >= DateTime.Now.Year - 5; i--)
                    {
                        <option value="@i" selected="@(i == Model?.Year)">@i</option>
                    }
                </select>
            </div>
            <div class="col-md-2 align-self-end">
                <button type="submit" class="btn btn-primary">Load</button>
            </div>
        </div>
    </form>

    @if (Model != null)
    {
        <h3 class="text-center mt-4">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Model.Month) - @Model.Year Performance</h3>

        <!-- Performance Overview Cards -->
        <div class="card mt-5">
            <div class="card-header text-center">
                Performance Overview
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <div class="card text-white bg-primary">
                            <div class="card-body">
                                <h5 class="card-title">Prepaid Sales</h5>
                                <p class="card-text">Target: @Model.PrepaidSalesTarget</p>
                                <p class="card-text">Total Sales: @Model.TotalPrepaidSales</p>
                                <p class="card-text">Performance: @Model.PrepaidSalesPerformance%</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card text-white bg-success">
                            <div class="card-body">
                                <h5 class="card-title">Postpaid Sales</h5>
                                <p class="card-text">Target: @Model.PostpaidSalesTarget</p>
                                <p class="card-text">Total Sales: @Model.TotalPostpaidSales</p>
                                <p class="card-text">Performance: @Model.PostpaidSalesPerformance%</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card text-white bg-info">
                            <div class="card-body">
                                <h5 class="card-title">Device Sales</h5>
                                <p class="card-text">Target: @Model.DeviceSalesTarget</p>
                                <p class="card-text">Total Sales: @Model.TotalDeviceSales</p>
                                <p class="card-text">Performance: @Model.DeviceSalesPerformance%</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card text-white bg-warning">
                            <div class="card-body">
                                <h5 class="card-title">M-Wallet Sales</h5>
                                <p class="card-text">Target: @Model.MWalletSalesTarget</p>
                                <p class="card-text">Total Sales: @Model.TotalMWalletSales</p>
                                <p class="card-text">Performance: @Model.MWalletSalesPerformance%</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card text-white bg-danger">
                            <div class="card-body">
                                <h5 class="card-title">4G Sales</h5>
                                <p class="card-text">Target: @Model.FourGSalesTarget</p>
                                <p class="card-text">Total Sales: @Model.TotalFourGSales</p>
                                <p class="card-text">Performance: @Model.FourGSalesPerformance%</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card text-white bg-secondary">
                            <div class="card-body">
                                <h5 class="card-title">Rox New Sales</h5>
                                <p class="card-text">Target: @Model.RoxNewSalesTarget</p>
                                <p class="card-text">Total Sales: @Model.TotalRoxNewSales</p>
                                <p class="card-text">Performance: @Model.RoxNewSalesPerformance%</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card text-white bg-dark">
                            <div class="card-body">
                                <h5 class="card-title">Rox Conversion Sales</h5>
                                <p class="card-text">Target: @Model.RoxConversionSalesTarget</p>
                                <p class="card-text">Total Sales: @Model.TotalRoxConversionSales</p>
                                <p class="card-text">Performance: @Model.RoxConversionSalesPerformance%</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance Graphs -->
        <div class="card mt-5">
            <div class="card-header text-center">
                Performance Charts
            </div>
            <div class="card-body">
                <div class="row mb-4">
                    <div class="col-md-12">
                        <canvas id="performanceChart"></canvas>
                    </div>
                </div>
                <div class="row mb-4">
                    <div class="col-md-12">
                        <canvas id="horizontalBarChart"></canvas>
                    </div>
                </div>
                <div class="row mb-4">
                    <div class="col-md-12">
                        <canvas id="salesDistributionChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Export Buttons -->
        <div class="row mt-5 justify-content-center">
            <div class="col-md-4 text-center">
                <button id="exportBtn" class="btn btn-primary w-100">Export Performance Data</button>
            </div>
            <div class="col-md-4 text-center">
                <button id="exportGraphsBtn" class="btn btn-secondary w-100">Export Graphs</button>
            </div>
        </div>

    }
    else
    {
        <div class="alert alert-warning mt-4 text-center" role="alert">
            <strong>No performance data available for the selected time period.</strong>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var performanceData = @Html.Raw(performanceData);
            var dailyPerformanceData = @Html.Raw(dailyPerformanceData);

            if (performanceData.length > 0) {
                var ctx = document.getElementById('performanceChart').getContext('2d');
                var performanceChart = new Chart(ctx, {
                    type: 'line', // Change the chart type to 'line'
                    data: {
                        labels: dailyPerformanceData.map(item => item.Date),
                        datasets: [{
                            label: 'Total Sales',
                            data: dailyPerformanceData.map(item => item.TotalSales),
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 2,
                            fill: false
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Daily Sales Chart' // Add your chart title here
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Value'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Date'
                                }
                            }
                        }
                    }
                });

                var ctx2 = document.getElementById('salesDistributionChart').getContext('2d');
                var salesDistributionChart = new Chart(ctx2, {
                    type: 'pie',
                    data: {
                        labels: performanceData.map(item => item.Name),
                        datasets: [{
                            data: performanceData.map(item => item.TotalSales),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(255, 159, 64, 0.2)',
                                'rgba(199, 199, 199, 0.2)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)',
                                'rgba(199, 199, 199, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false
                    }
                });

                var ctx3 = document.getElementById('horizontalBarChart').getContext('2d');
                var horizontalBarChart = new Chart(ctx3, {
                    type: 'bar',
                    data: {
                        labels: performanceData.map(item => item.Name),
                        datasets: [{
                            label: 'Total Sales',
                            data: performanceData.map(item => item.TotalSales),
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Target',
                            data: performanceData.map(item => item.Target),
                            type: 'scatter',
                            pointStyle: 'rectRot',
                            pointRadius: 6,
                            backgroundColor: 'rgba(255, 99, 132, 1)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        indexAxis: 'y',
                        plugins: {
                            title: {
                                display: true,
                                text: 'Monthly Performance' // Add your chart title here
                            }
                        },
                        scales: {
                            x: {
                                beginAtZero: true
                            }
                        }
                    }
                });


                document.getElementById('exportBtn').addEventListener('click', function () {
                    var wb = XLSX.utils.book_new();
                    var ws_data = [
                        ["Category", "Target", "Total Sales", "Performance (%)"],
                        ...performanceData.map(item => [item.Name, item.Target, item.TotalSales, item.Performance])
                    ];
                    var ws = XLSX.utils.aoa_to_sheet(ws_data);
                    XLSX.utils.book_append_sheet(wb, ws, 'Performance Data');

                    var zipFileName = `${monthYear.MonthName}-${monthYear.Year}-Performance.xlsx`;
                    XLSX.writeFile(wb, zipFileName);
                });

                document.getElementById('exportGraphsBtn').addEventListener('click', function () {
                    var charts = ['performanceChart', 'horizontalBarChart', 'salesDistributionChart'];
                    var promises = charts.map(chartId => {
                        var chart = document.getElementById(chartId);
                        return new Promise((resolve, reject) => {
                            chart.toBlob(blob => {
                                if (blob) {
                                    resolve({ blob: blob, name: chartId });
                                } else {
                                    reject('Could not generate image.');
                                }
                            });
                        });
                    });

                    Promise.all(promises).then(results => {
                        var zip = new JSZip();
                        results.forEach(result => {
                            zip.file(`${result.name}.png`, result.blob);
                        });
                        var zipFileName = `${monthYear.MonthName}-${monthYear.Year}-Performance-Graphs.zip`;
                        zip.generateAsync({ type: 'blob' }).then(content => {
                            saveAs(content, zipFileName);
                        });
                    });
                });
            }
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
}
