
<head>
    <title>Sales Dashboard</title>
    <style>
        .chart-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
        }

        .chart-card {

            display:flex;
            flex-wrap: wrap;
            justify-content: center;
            flex: 0 0 48%; /* Adjust the width of the cards */
            margin-bottom: 20px;
        }

            .chart-card .card {
                height: 100%;
            }

        canvas {
            width: 450px !important;
            height: 300px !important;
        }
    </style>
</head>

<div class="container mt-5">
    <h1 class="text-center mb-4">Daily Sales</h1>

    <div class="text-center mb-4">
        <button id="exportDataBtn" class="btn btn-primary mr-2">Export Data</button>
        <button id="exportGraphsBtn" class="btn btn-secondary">Export Graphs</button>
    </div>

    <div class="chart-container">
        <div class="chart-card">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Prepaid Sales</h5>
                </div>
                <div class="card-body">
                    <canvas id="prepaidSalesChart"></canvas>
                </div>
            </div>
        </div>

        <div class="chart-card">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Postpaid Sales</h5>
                </div>
                <div class="card-body">
                    <canvas id="postpaidSalesChart"></canvas>
                </div>
            </div>
        </div>

        <div class="chart-card">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Device Sales</h5>
                </div>
                <div class="card-body">
                    <canvas id="deviceSalesChart"></canvas>
                </div>
            </div>
        </div>

        <div class="chart-card">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Mwallet Sales</h5>
                </div>
                <div class="card-body">
                    <canvas id="MwalletChart"></canvas>
                </div>
            </div>
        </div>

        <div class="chart-card">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">4G Sales</h5>
                </div>
                <div class="card-body">
                    <canvas id="FourGChart"></canvas>
                </div>
            </div>
        </div>

        <div class="chart-card">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Rox New Sales</h5>
                </div>
                <div class="card-body">
                    <canvas id="RoxNewChart"></canvas>
                </div>
            </div>
        </div>

        <div class="chart-card">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Rox Conversion Sales</h5>
                </div>
                <div class="card-body">
                    <canvas id="RoxConversionChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Sample data for demonstration; replace with actual data
        var prepaidSales = @Html.Raw(Json.Serialize(Model?.PrepaidSale ?? new List<dynamic>()));
        var postpaidSales = @Html.Raw(Json.Serialize(Model?.PostpaidSale ?? new List<dynamic>()));
        var deviceSales = @Html.Raw(Json.Serialize(Model?.DeviceSale ?? new List<dynamic>()));
        var MwalletSales = @Html.Raw(Json.Serialize(Model?.MWalletSale ?? new List<dynamic>()));
        var FourGSales = @Html.Raw(Json.Serialize(Model?.FourGSale ?? new List<dynamic>()));
        var RoxNewSales = @Html.Raw(Json.Serialize(Model?.RoxNewSale ?? new List<dynamic>()));
        var RoxConversionSales = @Html.Raw(Json.Serialize(Model?.RoxConversionSale ?? new List<dynamic>()));

        // Prepaid Sales Chart
        const prepaidLabels = ['New Sales', 'Prepaid MNP', 'Total'];
        const prepaidData = prepaidSales.flatMap(({ newSales, prepaidMNP, total }) => [newSales, prepaidMNP, total]);
        var ctxPrepaid = document.getElementById('prepaidSalesChart').getContext('2d');
        var prepaidSalesChart = new Chart(ctxPrepaid, {
            type: 'bar',
            data: {
                labels: prepaidLabels,
                datasets: [{
                    label: 'No. of Sales',
                    data: prepaidData,
                    backgroundColor: 'rgba(146, 5, 7, 0.5)',
                    borderColor: 'rgba(146, 5, 7, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Number of Sales'
                        }
                    }
                }
            }
        });

        // Postpaid Sales Chart
        const postpaidLabels = ['Fresh Sales', 'Port IN', 'Pre To Post', 'Red Red Z', 'Total'];
        const postpaidData = postpaidSales.flatMap(({ freshSales, portIN, preToPost, redRedZ, total }) => [freshSales, portIN, preToPost, redRedZ, total]);

        var ctxPostpaid = document.getElementById('postpaidSalesChart').getContext('2d');
        var postpaidSalesChart = new Chart(ctxPostpaid, {
            type: 'bar',
            data: {
                labels: postpaidLabels,
                datasets: [{
                    label: 'No. of Sales',
                    data: postpaidData,
                    backgroundColor: 'rgba(255, 220, 1, 0.3)',
                    borderColor: 'rgba(255, 220, 1, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Number of Sales'
                        }
                    }
                }
            }
        });

        // Device Sales Chart
        const deviceLabels = ['MBB', 'Handsets', 'Total'];
        const deviceData = deviceSales.flatMap(({ mbb, handsets, total }) => [mbb, handsets, total]);

        var ctxDevice = document.getElementById('deviceSalesChart').getContext('2d');
        var deviceSalesChart = new Chart(ctxDevice, {
            type: 'bar',
            data: {
                labels: deviceLabels,
                datasets: [{
                    label: 'No. of Sales',
                    data: deviceData,
                    backgroundColor: 'rgba(0, 0, 0, 0.5)',
                    borderColor: 'rgba(0, 0, 0, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Number of Sales'
                        }
                    }
                }
            }
        });

        // Mwallet Sales Chart
        const mwalletLabels = ['Total'];
        const mwalletData = MwalletSales.flatMap(({ total }) => [total]);

        var ctxMwallet = document.getElementById('MwalletChart').getContext('2d');
        var MwalletSalesChart = new Chart(ctxMwallet, {
            type: 'bar',
            data: {
                labels: mwalletLabels,
                datasets: [{
                    label: 'No. of Sales',
                    data: mwalletData,
                    backgroundColor: 'rgba(146, 5, 7, 0.5)',
                    borderColor: 'rgba(146, 5, 7, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Number of Sales'
                        }
                    }
                }
            }
        });

        // 4G Sales Chart
        const FourGLabels = ['Total'];
        const FourGData = FourGSales.flatMap(({ total }) => [total]);

        var ctxFourG = document.getElementById('FourGChart').getContext('2d');
        var FourGSalesChart = new Chart(ctxFourG, {
            type: 'bar',
            data: {
                labels: FourGLabels,
                datasets: [{
                    label: 'No. of Sales',
                    data: FourGData,
                    backgroundColor: 'rgba(255, 220, 1, 0.3)',
                    borderColor: 'rgba(255, 220, 1, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Number of Sales'
                        }
                    }
                }
            }
        });

        // Rox New Sales Chart
        const RoxNewLabels = ['Total'];
        const RoxNewData = RoxNewSales.flatMap(({ total }) => [total]);

        var ctxRoxNew = document.getElementById('RoxNewChart').getContext('2d');
        var RoxNewSalesChart = new Chart(ctxRoxNew, {
            type: 'bar',
            data: {
                labels: RoxNewLabels,
                datasets: [{
                    label: 'No. of Sales',
                    data: RoxNewData,
                    backgroundColor: 'rgba(0, 0, 0, 0.5)',
                    borderColor: 'rgba(0, 0, 0, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Number of Sales'
                        }
                    }
                }
            }
        });

        // Rox Conversion Sales Chart
        const RoxConversionLabels = ['Total'];
        const RoxConversionData = RoxConversionSales.flatMap(({ total }) => [total]);

        var ctxRoxConversion = document.getElementById('RoxConversionChart').getContext('2d');
        var RoxConversionSalesChart = new Chart(ctxRoxConversion, {
            type: 'bar',
            data: {
                labels: RoxConversionLabels,
                datasets: [{
                    label: 'No. of Sales',
                    data: RoxConversionData,
                    backgroundColor: 'rgba(146, 5, 7, 0.5)',
                    borderColor: 'rgba(146, 5, 7, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Number of Sales'
                        }
                    }
                }
            }
        });

        // Export data as Excel
        document.getElementById("exportDataBtn").addEventListener("click", function () {
            var wb = XLSX.utils.book_new();
            var ws_data = [
                ["Prepaid Sales", "", "", "Postpaid Sales", "", "", "", "", "Device Sales", "", "", "Mwallet Sales", "4G Sales", "Rox New Sale", "", "", "", "", "Rox Conversion Sales", "", "", "", "", ""],
                ["New Sales", "Prepaid MNP", "Total", "Fresh Sales", "Port IN", "Pre to Post", "Red/Red Z", "Total", "MBB", "Handsets", "Total", "Total", "4G Sales", "Basic Vibe", "Boost", "Crazy Vibe", "Insane Vibe", "Total", "Basic Vibe", "Crazy Vibe", "Insane Vibe", "No Vibe", "Total"]
            ];

            var maxRows = Math.max(
                prepaidSales.length,
                postpaidSales.length,
                deviceSales.length,
                MwalletSales.length,
                FourGSales.length,
                RoxNewSales.length,
                RoxConversionSales.length
            );

            for (var i = 0; i < maxRows; i++) {
                var row = [];
                if (i < prepaidSales.length) {
                    row.push(prepaidSales[i].newSales, prepaidSales[i].prepaidMNP, prepaidSales[i].total);
                } else {
                    row.push("", "", "");
                }

                if (i < postpaidSales.length) {
                    row.push(postpaidSales[i].freshSales, postpaidSales[i].portIN, postpaidSales[i].preToPost, postpaidSales[i].redRedZ, postpaidSales[i].total);
                } else {
                    row.push("", "", "", "", "");
                }

                if (i < deviceSales.length) {
                    row.push(deviceSales[i].mbb, deviceSales[i].handsets, deviceSales[i].total);
                } else {
                    row.push("", "", "");
                }

                if (i < MwalletSales.length) {
                    row.push(MwalletSales[i].total);
                } else {
                    row.push("");
                }

                if (i < FourGSales.length) {
                    row.push(FourGSales[i].total);
                } else {
                    row.push("");
                }

                if (i < RoxNewSales.length) {
                    row.push(RoxNewSales[i].basicVibe, RoxNewSales[i].boost, RoxNewSales[i].crazyVibe, RoxNewSales[i].insaneVibe, RoxNewSales[i].total);
                } else {
                    row.push("", "", "", "", "");
                }

                if (i < RoxConversionSales.length) {
                    row.push(RoxConversionSales[i].basicVibe, RoxConversionSales[i].crazyVibe, RoxConversionSales[i].insaneVibe, RoxConversionSales[i].noVibe, RoxConversionSales[i].total);
                } else {
                    row.push("", "", "", "", "");
                }

                ws_data.push(row);
            }

            var ws = XLSX.utils.aoa_to_sheet(ws_data);

            // Merging cells for parent headers
            ws['!merges'] = [
                { s: { r: 0, c: 0 }, e: { r: 0, c: 2 } },
                { s: { r: 0, c: 3 }, e: { r: 0, c: 7 } },
                { s: { r: 0, c: 8 }, e: { r: 0, c: 10 } },
                { s: { r: 0, c: 11 }, e: { r: 0, c: 11 } },
                { s: { r: 0, c: 12 }, e: { r: 0, c: 12 } },
                { s: { r: 0, c: 13 }, e: { r: 0, c: 17 } },
                { s: { r: 0, c: 18 }, e: { r: 0, c: 22 } }
            ];

            XLSX.utils.book_append_sheet(wb, ws, "Sales Data");
            XLSX.writeFile(wb, "sales_data.xlsx");
        });

        // Export graphs as images in a zip file
        document.getElementById("exportGraphsBtn").addEventListener("click", function () {
            var zip = new JSZip();
            var charts = [
                prepaidSalesChart,
                postpaidSalesChart,
                deviceSalesChart,
                MwalletSalesChart,
                FourGSalesChart,
                RoxNewSalesChart,
                RoxConversionSalesChart
            ];

            var promises = charts.map(function (chart, index) {
                return new Promise(function (resolve) {
                    chart.canvas.toBlob(function (blob) {
                        zip.file(`chart_${index + 1}.png`, blob);
                        resolve();
                    });
                });
            });

            Promise.all(promises).then(function () {
                zip.generateAsync({ type: "blob" }).then(function (content) {
                    saveAs(content, "charts.zip");
                });
            });
        });

    });

</script>


