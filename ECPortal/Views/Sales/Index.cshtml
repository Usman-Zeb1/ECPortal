@* @model List<Pk.Com.Jazz.ECP.Models.EmployeeSales>
@using Newtonsoft.Json;

@{
    ViewData["Title"] = "Employee Sales";

    var salesStatusData = Model != null
        ? JsonConvert.SerializeObject(Model.GroupBy(s => s.Status).Select(g => new { Status = g.Key, Count = g.Count() }).ToList(), new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })
        : "[]";

    var salesProgressData = Model != null
        ? JsonConvert.SerializeObject(Model.GroupBy(s => s.SalesDate).Select(g => new { Date = g.Key, Amount = g.Sum(s => s.SalesAmount) }).ToList(), new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })
        : "[]";
}

<h1 class="text-center my-4">@ViewData["Title"]</h1>

<div class="container">
    <!-- Chart Container -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">Sales Status and Progress</h3>
        </div>
        <div class="card-body">
            @if (Model == null || Model.Count == 0)
            {
                <div class="text-center mt-2">No sales data available for charts.</div>
            }
            else{
            <div class="row">
                <!-- Pie Chart: Sales Status -->
                <div class="col-md-6">
                    <canvas id="salesStatusChart" width="400" height="200"></canvas>
                </div>
                <!-- Line Chart: Sales Progress Over Time -->
                <div class="col-md-6">
                    <canvas id="salesProgressChart" width="400" height="200"></canvas>
                </div>
            </div>
            }
        </div>
    </div>

    <!-- Sales Details Table -->
    <div class="card mt-4">
        <div class="card-header">
            <h3 class="mb-0">Sales Details</h3>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="salesTable" class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Id</th>
                            <th>Sales Date</th>
                            <th>Status</th>

                            <th>Sales Amount</th>
                            <th>Comments</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Count > 0)
                        {
                            foreach (var sale in Model)
                            {
                                <tr>
                                    <td>@sale.Id</td>
                                    <td>@sale.SalesDate.ToShortDateString()</td>
                                    <td>@sale.Status</td>
                                    <td>@sale.SalesAmount.ToString("C")</td>
                                    <td>@sale.Comments</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">No sales data available.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize DataTable
            $('#salesTable').DataTable({
                paging: true,
                pageLength: 5,
                lengthChange: false,
                info: false
            });

            // Parse sales status data
            var salesStatusData = @Html.Raw(salesStatusData);
            var salesProgressData = @Html.Raw(salesProgressData);

            // Pie Chart: Sales Status
            var ctxStatus = document.getElementById('salesStatusChart').getContext('2d');
            new Chart(ctxStatus, {
                type: 'pie',
                data: {
                    labels: salesStatusData.map(item => item.Status),
                    datasets: [{
                        label: 'Sales Status',
                        data: salesStatusData.map(item => item.Count),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.5)',
                            'rgba(54, 162, 235, 0.5)',
                            'rgba(255, 206, 86, 0.5)',
                            'rgba(75, 192, 192, 0.5)',
                            'rgba(153, 102, 255, 0.5)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });

            // Line Chart: Sales Progress Over Time
            var ctxProgress = document.getElementById('salesProgressChart').getContext('2d');
            new Chart(ctxProgress, {
                type: 'line',
                data: {
                    labels: salesProgressData.map(item => item.Date.toString().split('T')[0]),
                    datasets: [{
                        label: 'Sales Progress',
                        data: salesProgressData.map(item => item.Amount),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            },
                            ticks: {
                                maxRotation: 90,
                                minRotation: 45
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Amount'
                            },
                            min: 0,
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            callbacks: {
                                title: function (context) {
                                    return context[0].label;
                                },
                                label: function (context) {
                                    return `Amount: $${context.raw}`;
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
} *@